.TH "el_init" "3" "14 lutego 2019 (v0.3.3)" "bofc.pl"
.SH NAME
.PP
.B el_init
- initializes library and options for printing.
.SH SYNOPSIS
.PP
.BI "#include <embedlog.h>
.PP
.BI "int el_init(void)"
.br
.BI "int el_oinit(struct options *" options ")"
.SH DESCRIPTION
.PP
There are two types of functions in
.BR embedlog.
Functions that use global static structure inside library, these functions don't
accept
.I options
argument.
.PP
Another type are functions that accept
.I options
argument. These functions are prefixed with
.BR el_o .
.PP
All functions (options or not) are "line" thread-safe (provided that
.B \-\-enable\-reentrant
is turned on).
That means library buffers whole line before it calls
.B puts
function, so lines in output will not overlap.
.PP
NOTE: this may not be entirely true for every operating system there is! Yes,
.B embedlog
will always buffer and print whole lines, but OS may, for example interrupt
.B puts
call from thread1, and call
.B puts
from thread2.
In such case output will be mangled with 2 different lines.
While this situation is very rare, it's only fair to mention it.
If in doubt, check
.B stdio
implementation in your operating system.
.PP
.BR el_init (3)
initializes static global option structure. This option structure is used by all
functions that don't accept
.I options
parameter.
If you want to use only one instance of
.BR embedlog ,
this is the function you want to use.
.PP
.BR el_oinit (3)
initializes only
.I options
structure passed to it.
Functions that accepts
.I options
may be used.
If you want to have multiple embedlog instances (ie. one for program logs,
and one for queries) that stores logs differently - this is the function you
want to use.
.SH RETURN VALUE
.PP
Both functions will return 0 upon success and -1 on errors.
.SH ERRORS
.TP
.B EINVAL
.I options
is invalid (null).
.SH EXAMPLE
.PP
Note: error handling has been ommited for clarity sake
.PP
.EX
    #include <embedlog.h>

    int main(void)
    {
        struct el_options opts;

        /* initialize both default and opts */
        el_init();
        el_oinit(&opts);

        /* make default logger to print to stderr */
        el_option(EL_OUT, EL_OUT_STDERR);

        /* make opts to print to file */
        el_ooption(&opts, EL_OUT, EL_OUT_STDERR);
        el_ooption(&opts, EL_FPATH, "/tmp/test.log");

        /* print messages */
        el_print(ELI, "will print to stderr");
        el_oprint(ELI, &opts, "will print to file /tmp/test.log");

        /* cleanup after any initialization code (like fopen) */
        el_ocleanup(&opts);
        el_cleanup();

        return 0;
    }
.EE
.SH SEE ALSO
.PP
.BR el_init (3),
.BR el_cleanup (3),
.BR el_overview (7),
.BR el_option (3),
.BR el_puts (3),
.BR el_print (3),
.BR el_vprint (3),
.BR el_perror (3),
.BR el_pmemory (3),
.BR el_ocleanup (3),
.BR el_ooption (3),
.BR el_oputs (3),
.BR el_oprint (3),
.BR el_ovprint (3),
.BR el_operror (3),
.BR el_opmemory (3),
